#!/bin/sh

# Run ssh-agent (inside the build environment)
eval $(ssh-agent -s)

# Add the SSH key for reading subrepositories
[[ -n "$SSH_REPOSITORY_KEY" ]] && ssh-add <(echo "$SSH_REPOSITORY_KEY")
unset SSH_REPOSITORY_KEY

# Add the SSH key for live deployment (one per client)
[[ -n "$SSH_DEPLOYMENT_KEY" ]] && ssh-add <(echo "$SSH_DEPLOYMENT_KEY")
unset SSH_DEPLOYMENT_KEY

# Add the SSH key for staging deployment (galactica and maybe others)
[[ -n "$SSH_STAGING_KEY" ]] && ssh-add <(echo "$SSH_STAGING_KEY")
unset SSH_STAGING_KEY

# Add known hosts from project to the current user
[ -f /.dockerenv -a -f .known_hosts ] && cp .known_hosts ~/.ssh/known_hosts

# Ensure CI_PROJECT_NAME is set
if [ ! -n "$CI_PROJECT_NAME" ]; then
    echo "CI_PROJECT_NAME is not set!"
    exit 1
fi

# Reset cache if necessary
BUILD_DATE=`cat /build_date`
CACHE_DATE=""
if [ -f "/cache/$CI_PROJECT_NAME/cache_date" ]; then
    CACHE_DATE=`cat /cache/$CI_PROJECT_NAME/cache_date`
fi

if [ "$BUILD_DATE" != "$CACHE_DATE" ]; then
    rm -fr /cache/$CI_PROJECT_NAME
fi

# Set cache directories
mkdir -p "/cache/$CI_PROJECT_NAME"
cp /build_date "/cache/$CI_PROJECT_NAME/cache_date"
npm config set cache "/cache/$CI_PROJECT_NAME/npm"
export COMPOSER_HOME="/cache/$CI_PROJECT_NAME/composer"
export GEM_HOME="/cache/$CI_PROJECT_NAME/gems"

# Add authentication to composer
mkdir -p $COMPOSER_HOME
echo "$COMPOSER_BASE64" | base64 -d > $COMPOSER_HOME/auth.json
unset COMPOSER_BASE64
